package Pages;
import static org.junit.Assert.assertTrue;

import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public abstract class AbstractPageObject {
	protected WebDriver driver;
	protected WebDriverWait wait;

	public AbstractPageObject(WebDriver driver) {
		System.out.println("driver=" + driver+ "abstract"); 
		this.driver = driver;
		this.wait = new WebDriverWait(driver, 30);
		isLoaded();
	}

	/**
	 * Cada PageObject debe implementar este metodo para retornar el
	 * identificador del elemento mas importante de la pagina. La presencia de
	 * ese elemento se va a utilizar para dar el estado de pagina lista para
	 * operar.
	 * 
	 * @return By El locator para el elemento principal de la pagina
	 */
	protected abstract By getElementoPrincipal();

	/**
	 * Verifica que la pagina este lista para ser utilizada basandose en que el
	 * elemento principal de la misma se esta mostrando
	 */
	protected void isLoaded() throws Error {
		List<WebElement> elementoPrincipal = driver
				.findElements(getElementoPrincipal());
		assertTrue("El elemento unico \'" + getElementoPrincipal().toString()
				+ "\' no fue encontrado " + this.getClass().getSimpleName(),
				elementoPrincipal.size() > 0);
		wait.until(ExpectedConditions
				.visibilityOfElementLocated(getElementoPrincipal()));
	}
}